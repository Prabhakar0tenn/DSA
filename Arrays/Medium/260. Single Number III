//Problem Link:- https://leetcode.com/problems/single-number-iii/description/

// optimal approach O(n);
// 1st xor kar lo saare numbers ka
// 2nd pta karo left most set bit and xor^-xor kr k mask aata h mtlb sirf wo left most set bit bachti h baki sab 0 eg agar 1110 h toh bs 10 bachega
//now is mask ka array k saare elemets k saath & kra k dekho jo 1 dete unhe f1 array m daalo baaki ko g2 m
//now g1 ke saare elements ka xor and same with g2 dono se wahi dono single elements nikal k aayenge
//un dono ko fhr result array m store kr lenge and return result;

class Solution {
    public int[] singleNumber(int[] nums) {

        int[] g1=new int[nums.length];
        int[] g2=new int[nums.length];

        int xor=0;
        for(int i=0;i<nums.length;i++){
            xor=xor^nums[i];
        }

        int mask=xor&(-xor);
        int k=0; int l=0;

        for(int i=0;i<nums.length;i++){
            if((nums[i]& mask)!=0){
                g1[k]=nums[i];
                k++;
            }
            else{
                g2[l]=nums[i];
                l++;
            }
        }
        int [] result=new int[2];

        int a=0;
        for(int i=0;i<g1.length;i++){
           a=a^g1[i];
        }
        int b=0;
        for(int i=0;i<g2.length;i++){
           b=b^g2[i];
        }
        result[0]=a;
        result[1]=b;

        return result;
        
    }
}






// solution with O(n^2)

// class Solution {
//     public int[] singleNumber(int[] nums) {
//         int[] temp=new int[2];
//         int k=0;
        
//         for(int i=0;i<nums.length;i++){
//             int flag=0; //flag ko bahar rakh diya tha jis se wo reset nhi ho rha tha har i k liye....
//             for(int j=0;j<nums.length;j++){
//                 if(j!=i){
//                if(nums[i]==nums[j]){
//                 flag=1;
//                }
//             }
//             }
//             if(flag==0){
//             temp[k]=nums[i];
//             k++;
//             }
//         }
//         return temp;
//     }
// }
